# -*- coding: utf-8 -*-
"""MBAC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16BB-L26HpJeVSHMYU0Q8bPf7-T_GGWfv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

file_path = "/content/drive/Shareddrives/Manhattan BAC/oecd data.csv"
df = pd.read_csv(file_path)

from google.colab import drive
drive.mount('/content/drive')

print("Data shape:", df.shape)
years = [str(year) for year in range(2010, 2024)]

def plot_info(plt, show = True):
    plt.xlabel("Year")
    plt.ylabel("Debt (% of GDP)")
    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(2))
    plt.gca().xaxis.set_minor_locator(ticker.MultipleLocator(1))
    plt.gca().yaxis.set_major_locator(ticker.MultipleLocator(25))
    plt.gca().yaxis.set_minor_locator(ticker.MultipleLocator(5))
    plt.grid(True)
    plt.tight_layout()
    if show:
        plt.show()

# bar chart of 2023
debt_2023 = df[['Country', '2023']].copy()
debt_2023['2023'] = debt_2023['2023'].astype(float)
debt_2023 = debt_2023.sort_values(by='2023', ascending=False)

plt.figure(figsize=(14, 8))
plt.bar(debt_2023['Country'], debt_2023['2023'], color='skyblue')
plt.title("Central Government Debt (% of GDP) in 2023 by Country")
plt.xticks(rotation=90)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# plot all 32 countries
plt.figure(figsize=(14, 8))

for idx, row in df.iterrows():
    country_name = row['Country']
    debt_values = row[years].astype(float)
    plt.plot(years, debt_values, label=country_name, marker = 'o', markersize = 3)

plt.title("Central Government Debt (% of GDP) from 2010 to 2023")
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=2)
plt.ylim(0, 240)

plot_info(plt)

# top 5 countries with the highest debt in 2023
top5_2023 = debt_2023.sort_values(by='2023', ascending=False).head(5)

plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 2)
for _, row in top5_2023.iterrows():
    country_name = row['Country']
    label = f"{country_name} ({round(row['2023'],2)})"
    debt_values = df[df['Country'] == country_name].iloc[0][years].astype(float)
    plt.plot(years, debt_values, marker='o', markersize = 3, label=label)

plt.title("Top 5 Countries with Highest Debt in 2023")
plt.legend()
plot_info(plt)

# top 5 countries with the least debt in 2023
bottom5_2023 = debt_2023.sort_values(by='2023', ascending=True).head(5)

plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 2)
for _, row in bottom5_2023.iterrows():
    country_name = row['Country']
    label = f"{country_name} ({round(row['2023'],2)})"
    debt_values = df[df['Country'] == country_name].iloc[0][years].astype(float)
    plt.plot(years, debt_values, marker='o', markersize = 3, label=label)

plt.title("Top 5 Countries with Lowest Debt in 2023")
plt.ylim(0, 60)
plt.legend(loc='upper left', bbox_to_anchor=(0, 1))
plot_info(plt)

# top 5 countries with the highest debt AND lowest debt in 2023
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 2)
both_23 = pd.concat([top5_2023, bottom5_2023])
both_23 = both_23.sort_values(by='2023', ascending=False)

for _, row in both_23.iterrows():
    country_name = row['Country']
    label = f"{country_name} ({round(row['2023'],2)})"
    debt_values = df[df['Country'] == country_name].iloc[0][years].astype(float)
    plt.plot(years, debt_values, marker='o', markersize = 3, label=label)

plt.title("Top 5 Countries with Highest/Lowest Debt in 2023")
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))
plot_info(plt)

trends = []
for index, row in df.iterrows():
    debt_values = row[years].astype(float).values
    slope = np.polyfit(range(len(debt_values)), debt_values, 1)[0]  # slope of best fit line
    trends.append((row['Country'], slope))

trends.sort(key=lambda x: x[1], reverse=True)

top_incr = trends[:5]
top_decr = trends[-5:]

# top 5 incr debt
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
percent_changes = []
for country, _ in top_incr:
    country_data = df[df['Country'] == country].iloc[0]
    percent_change = ((country_data['2023'] - country_data['2010']) / country_data['2010']) * 100
    percent_changes.append((country, percent_change))

top_incr = sorted(percent_changes, key=lambda x: x[1], reverse=True)
for country, percent_change in top_incr:
    label = f"{country} (+{percent_change:.1f}% total)"
    plt.plot(years, df[df['Country'] == country].iloc[0][years].astype(float), label=label, marker='o', markersize=3)

plt.title("Top 5 Increasing Debt (% of GDP)")
plt.legend(loc='upper left', bbox_to_anchor=(0, 1))
plt.ylim(0, 250)
plot_info(plt)

# top 5 decr debt
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 2)

percent_changes = []
for country, _ in top_decr:
    country_data = df[df['Country'] == country].iloc[0]
    percent_change = ((country_data['2023'] - country_data['2010']) / country_data['2010']) * 100
    percent_changes.append((country, percent_change))

top_decr = sorted(percent_changes, key=lambda x: x[1], reverse=False)
for country, percent_change in top_decr:
    label = f"{country} ({percent_change:.1f}% total)"
    plt.plot(years, df[df['Country'] == country].iloc[0][years].astype(float), label=label, marker='o', markersize=3)

plt.title("Top 5 Decreasing Debt (% of GDP)")
plt.legend(loc='upper left', bbox_to_anchor=(0, 1))
plt.ylim(0, 250)
plot_info(plt)

# both same graph
plt.figure(figsize=(16, 6))
plt.subplot(1, 2, 2)

incr_changes = []
for country, _ in top_incr:
    country_data = df[df['Country'] == country].iloc[0]
    percent_change = ((country_data['2023'] - country_data['2010']) / country_data['2010']) * 100
    incr_changes.append((country, percent_change))

decr_changes = []
for country, _ in top_decr:
    country_data = df[df['Country'] == country].iloc[0]
    percent_change = ((country_data['2023'] - country_data['2010']) / country_data['2010']) * 100
    decr_changes.append((country, percent_change))

incr_sorted = sorted(incr_changes, key=lambda x: x[1], reverse=True)
decr_sorted = sorted(decr_changes, key=lambda x: x[1])

for country, percent_change in incr_sorted:
    label = f"{country} (+{percent_change:.1f}%)"
    plt.plot(years, df[df['Country'] == country].iloc[0][years].astype(float), label=label, marker='o', markersize=3)
for country, percent_change in decr_sorted:
    label = f"{country} ({percent_change:.1f}%)"
    plt.plot(years, df[df['Country'] == country].iloc[0][years].astype(float), label=label, marker='o', markersize=3)

plt.title("Top 5 Increasing and Decreasing Central Government Debt (% of GDP)")
plt.ylim(0, 250)
plt.legend(loc='upper left', bbox_to_anchor=(1.02, 1), title="Country (Change %)")
plot_info(plt)

debt_5yr = df[['Country', '2019', '2020', '2021', '2022', '2023']].copy()
yrs5 = ['2019', '2020', '2021', '2022', '2023']
# debt_5yr.head()

# last 5 years
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 2)

trends = []
for index, row in debt_5yr.iterrows():
    debt_values = row[yrs5].astype(float).values
    slope = np.polyfit(range(len(debt_values)), debt_values, 1)[0]  # slope of best fit line
    trends.append((row['Country'], slope))
trends.sort(key=lambda x: x[1], reverse=True)
top_incr = trends[:5]
top_decr = trends[-5:]


incr_changes = []
for country, _ in top_incr:
    country_data = df[df['Country'] == country].iloc[0]
    percent_change = ((country_data['2023'] - country_data['2019']) / country_data['2019']) * 100
    incr_changes.append((country, percent_change))

decr_changes = []
for country, _ in top_decr:
    country_data = df[df['Country'] == country].iloc[0]
    percent_change = ((country_data['2023'] - country_data['2019']) / country_data['2019']) * 100
    decr_changes.append((country, percent_change))

incr_sorted = sorted(incr_changes, key=lambda x: x[1], reverse=True)
decr_sorted = sorted(decr_changes, key=lambda x: x[1])

for country, percent_change in incr_sorted:
    label = f"{country} (+{percent_change:.1f}%)"
    plt.plot(yrs5, df[df['Country'] == country].iloc[0][yrs5].astype(float), label=label, marker='o', markersize=3)
for country, percent_change in decr_sorted:
    label = f"{country} ({percent_change:.1f}%)"
    plt.plot(yrs5, df[df['Country'] == country].iloc[0][yrs5].astype(float), label=label, marker='o', markersize=3)

plt.title("Top 5 Increasing and Decreasing Central Government Debt (% of GDP) 2019-2023")
plt.ylim(0, 250)
plt.xlabel("Year")
plt.ylabel("Debt (% of GDP)")
plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(1))
plt.gca().yaxis.set_major_locator(ticker.MultipleLocator(25))
plt.gca().yaxis.set_minor_locator(ticker.MultipleLocator(5))
plt.grid(True)
plt.tight_layout()
plt.legend(loc='upper left', bbox_to_anchor=(1, 1), title="Country (Change %)")
plt.show()

